package main

import (
	"github.com/AlexsJones/go-openapi/models"
	"github.com/AlexsJones/go-openapi/restapi/operations/health"
	"github.com/AlexsJones/go-openapi/restapi/operations/user"
	"github.com/go-openapi/runtime/middleware"
	"log"
	"os"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/AlexsJones/go-openapi/restapi"
	"github.com/AlexsJones/go-openapi/restapi/operations"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	users := map[int64]*models.User{}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}

	api := operations.NewGitlabAutoDevopsExampleAPI(swaggerSpec)

	// Example handlers for the generated API functions...
	api.UserCreateUserHandler = user.CreateUserHandlerFunc(func(params user.CreateUserParams) middleware.Responder {
		users[int64(len(users))] = params.Body
		log.Print("Created a user %",params.Body)
		return user.NewCreateUserDefault(200)
	})

	api.HealthGetHealthHandler = health.GetHealthHandlerFunc(func(params health.GetHealthParams) middleware.Responder {

		//Basic health check
		return health.NewGetHealthOK()
	})

	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "Swagger Petstore"
	parser.LongDescription = swaggerSpec.Spec().Info.Description
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	server.Port = 8080
	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
